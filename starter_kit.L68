00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/02/2019 15:57:25

00000000                             1  *-------------------------------------------------------
00000000                             2  * Author         : Michael Rainsford Ryan
00000000                             3  * Student Number : C00239510
00000000                             4  * Date Created   : 21/01/2019
00000000                             5  * Description    : A simplified, offline clone of the
00000000                             6  *                : online game "Avalon".
00000000                             7  * Issues/Bugs    : None currenty.
00000000                             8  *-------------------------------------------------------
00000000                             9  
00001000                            10      org $1000
00001000                            11  
00001000                            12  *-------------------------------------------------------
00001000                            13  *Choose to be a Worker or a God 
00001000                            14  *https://www.avalon-rpg.com/
00001000                            15  *-------------------------------------------------------
00001000                            16  
00001000                            17  *-------------------------------------------------------
00001000                            18  *Validation values to be used, modify as needed
00001000                            19  *Add additional validation values as required
00001000                            20  *-------------------------------------------------------
00001000  =00000000                 21  exit        EQU 0      used to exit assembly program
00001000  =00000064                 22  min_feed    EQU 100    min feed requirement
00001000  =00000001                 23  min_potions EQU 1      min number of potions
00001000  =00000009                 24  max_potions EQU 9      max number of potions
00001000  =00000006                 25  min_weapons EQU 6      min weapons
00001000  =00000005                 26  win_point   EQU 5      points accumilated on win
00001000  =00000008                 27  lose_point  EQU 8      points deducted on a loss
00001000                            28  
00001000  =00000064                 29  mine_loc    EQU 100    example for a hit
00001000                            30  
00001000                            31  
00001000                            32  *Start of Game
00001000                            33  start:
00001000  11FC 0064 4000            34      move.b  #100,$4000 put score/health in memory location $4000
00001006  47F8 4000                 35      lea     $4000,A3   assign address A3 to that memory location
0000100A                            36      
0000100A  11FC 0000 4010            37      move.b  #0,$4010   put game state number in memory location $4010
00001010  49F8 4010                 38      lea     $4010,A4   assign address A4 to that memory location
00001014                            39      *1 = Pick role/intro | 5 = Move around | 6 = Combat | 10 to 20 = Shop | 20 = End game
00001014                            40  
00001014  11FC 0000 4020            41      move.b  #0,$4020   put class number in memory location $4020
0000101A  4BF8 4020                 42      lea     $4020,A5   assign address A5 to that memory location
0000101E                            43      * 1 corresponds to knight - 2 corresponds to mage - 3 corresponds to rogue
0000101E                            44      
0000101E                            45      *A6 is used for player coordinates
0000101E                            46  
0000101E  6100 1FEA                 47      bsr     welcome    branch to the welcome subroutine
00001022  6100 1FDC                 48      bsr     game       branch to the game subroutine
00001026                            49  *Game loop
00003000                            50      org     $3000      the rest of the program is to be located from 3000 onwards
00003000                            51  
00003000                            52  *-------------------------------------------------------
00003000                            53  *-------------------Game Subroutine---------------------
00003000                            54  *-------------------------------------------------------
00003000                            55  game:
00003000  6100 012C                 56      bsr     gameloop   branch to gameloop subroutine
00003004  4E75                      57      rts                return from game: subroutine
00003006                            58            
00003006                            59  end:
00003006  FFFF FFFF                 60      simhalt
0000300A                            61  
0000300A                            62  *-------------------------------------------------------
0000300A                            63  *-------------------Welcome Subroutine------------------
0000300A                            64  *-------------------------------------------------------
0000300A                            65  welcome:
0000300A  6100 0298                 66      bsr     endl            branch to endl subroutine
0000300E  43F9 000032FF             67      lea     welcome_msg,A1  assign message to address register A1
00003014  103C 000E                 68      move.b  #14,D0          move literal 14 to DO
00003018  4E4F                      69      trap    #15             trap and interpret value in D0
0000301A  6100 0288                 70      bsr     endl            branch to endl subroutine
0000301E  4E75                      71      rts                     return from welcome: subroutine
00003020                            72  
00003020                            73  *-------------------------------------------------------
00003020                            74  *-------------------Role Picking Subroutine------------------
00003020                            75  *-------------------------------------------------------
00003020                            76  pick_role:
00003020                            77  
00003020  43F9 000034E4             78      lea     wake_up_msg,A1  assign message to address register A1
00003026  103C 000E                 79      move.b  #14,D0          move literal 14 to DO
0000302A  4E4F                      80      trap    #15             trap and interpret value in D0
0000302C  6100 0276                 81      bsr     endl            branch to endl subroutine
00003030                            82      
00003030  43F9 0000356D             83      lea     pick_role_msg,A1 assign message to address register A1
00003036  103C 000E                 84      move.b  #14,D0           move literal 14 to DO
0000303A  4E4F                      85      trap    #15              trap and interpret value in D0
0000303C                            86      
0000303C  1A3C 0003                 87      move.b  #3,D5           Move the number 3 to D5 to tell the program how many options there are
00003040                            88      
00003040  6100 000A                 89      bsr     input           branch to the input subroutine
00003044                            90      
00003044  103C 0004                 91      move.b  #4,D0           Move the number 4 to D0
00003048  4E4F                      92      trap    #15             Take input
0000304A                            93      
0000304A  4E75                      94      rts                     return from pick_role: subroutine
0000304C                            95      
0000304C                            96  *-------------------------------------------------------
0000304C                            97  *---------Gameplay Input Values Subroutine--------------
0000304C                            98  *-------------------------------------------------------    
0000304C                            99  input:
0000304C  6100 0256                100      bsr     endl            Branch to end line subroutine
00003050                           101      
00003050  43F9 000036CC            102      lea     input_nums_msg,A1 assign message to address register A1
00003056  103C 000E                103      move.b  #14,D0          move literal 14 to DO
0000305A  4E4F                     104      trap    #15             Display the "enter number" message
0000305C                           105      
0000305C  2205                     106      move.l  D5,D1           Move the number of options to D1 to display it
0000305E  103C 0003                107      move.b  #3,D0           move literal 3 to DO
00003062  4E4F                     108      trap    #15             Display the number in D1 to show the input range
00003064                           109      
00003064  43F9 000036E5            110      lea     colon_msg,A1    assign message to address register A1
0000306A  103C 000E                111      move.b  #14,D0          move literal 14 to DO
0000306E  4E4F                     112      trap    #15             Display a colon after the number range
00003070                           113      
00003070  103C 0004                114      move.b  #4,D0           Move the number 4 to D0
00003074  4E4F                     115      trap    #15             Take input
00003076                           116      
00003076                           117  manage_input:
00003076  B27C 0001                118      CMP     #1,D1           Check input against minimum value
0000307A  6D00 001E                119      BLT     invalid_input   Error if less than 1
0000307E                           120      
0000307E  B245                     121      CMP     D5,D1           Compare input against max value
00003080  6E00 0018                122      BGT     invalid_input   Error if less than max value
00003084                           123      
00003084  0C14 0000                124      CMP.B   #0,(A4)         Check which state the game is in
00003088  6700 001E                125      BEQ     role_input      Branch to the manage input for the role picking
0000308C  0C14 0005                126      CMP.B   #5,(A4)         Check which state the game is in
00003090  6700 0064                127      BEQ     movement_input  Branch to the manage input for the movement
00003094  6600 008A                128      BNE     fake_gamestate  branch to display a message if the gamestate is undifined
00003098                           129      
00003098  4E75                     130      rts                     Return out of subroutine
0000309A                           131  
0000309A                           132  invalid_input:
0000309A  43F9 000036E8            133      lea     input_error_msg,A1 assign message to address register A1
000030A0  103C 000E                134      move.b  #14,D0          move literal 14 to DO
000030A4  4E4F                     135      trap    #15             Display the error message
000030A6                           136      
000030A6  60A4                     137      bra     input           Go back to taking input
000030A8                           138      
000030A8                           139  role_input:
000030A8  1A81                     140      move.b  D1,(A5)         Move the role number to A5 to hold the class number
000030AA                           141      
000030AA                           142      *Give the player a message depending on the role chosen
000030AA  B23C 0001                143      CMP.B   #1,D1
000030AE  6700 001C                144      BEQ     knight_select   Branch to knight message if role selected
000030B2                           145      
000030B2  B23C 0002                146      CMP.B   #2,D1
000030B6  6700 0022                147      BEQ     mage_select     Branch to mage message if role selected
000030BA                           148      
000030BA  B23C 0003                149      CMP.B   #3,D1
000030BE  6700 0028                150      BEQ     rogue_select    Branch to rogue message if role selected
000030C2                           151      
000030C2  18BC 0005                152      move.b  #5,(A4)         Change the game state to the movement state
000030C6  4DF8 514A                153      lea     $514A,A6         Set the player coordinate to the first corridor
000030CA                           154      
000030CA  4E75                     155      rts
000030CC                           156      
000030CC                           157  knight_select:
000030CC  43F9 00003728            158      lea     knight_role_msg,A1 assign message to address register A1
000030D2  103C 000E                159      move.b  #14,D0          move literal 14 to DO
000030D6  4E4F                     160      trap    #15             Display the knight message
000030D8  4E75                     161      rts                     Return from the sub routine
000030DA                           162  
000030DA                           163  mage_select:
000030DA  43F9 000037BF            164      lea     mage_role_msg,A1 assign message to address register A1
000030E0  103C 000E                165      move.b  #14,D0          move literal 14 to DO
000030E4  4E4F                     166      trap    #15             Display the mage message
000030E6  4E75                     167      rts                     Return from the sub routine
000030E8                           168  
000030E8                           169  rogue_select:
000030E8  43F9 00003854            170      lea     rogue_role_msg,A1 assign message to address register A1
000030EE  103C 000E                171      move.b  #14,D0          move literal 14 to DO
000030F2  4E4F                     172      trap    #15             Display the rogue message
000030F4  4E75                     173      rts                     Return from the sub routine
000030F6                           174      
000030F6                           175  movement_input:
000030F6  B27C 0001                176      CMP     #1,D1
000030FA  6700 001C                177      BEQ     move_north
000030FE                           178      
000030FE  B27C 0001                179      CMP     #1,D1
00003102  6700 0016                180      BEQ     move_east
00003106                           181      
00003106  B27C 0001                182      CMP     #1,D1
0000310A  6700 0010                183      BEQ     move_south
0000310E                           184      
0000310E  B27C 0001                185      CMP     #1,D1
00003112  6700 000A                186      BEQ     move_west
00003116                           187      
00003116  4E75                     188      rts
00003118                           189  
00003118                           190  move_north:
00003118  4E75                     191      rts
0000311A                           192      
0000311A                           193  move_east:
0000311A  4E75                     194      rts
0000311C                           195      
0000311C                           196  move_south:
0000311C  4E75                     197      rts
0000311E                           198      
0000311E                           199  move_west:
0000311E  4E75                     200      rts
00003120                           201  
00003120                           202  fake_gamestate:
00003120  43F9 0000370F            203      lea     fake_gamestate_msg,A1     assign message to address register A1
00003126  103C 000E                204      move.b  #14,D0          move literal 14 to DO
0000312A  4E4F                     205      trap    #15             Display the error message
0000312C  4E75                     206      rts
0000312E                           207  
0000312E                           208  *-------------------------------------------------------
0000312E                           209  *----------------Gameloop (main loop)-------------------
0000312E                           210  *------------------------------------------------------- 
0000312E                           211  gameloop:
0000312E  6100 002A                212      bsr     update          branch to update game subroutine 
00003132  6100 013E                213      bsr     clear_screen    clears the screen         
00003136  6100 003C                214      bsr     draw            branch to draw screen subroutine
0000313A  6100 0136                215      bsr     clear_screen    clears the screen
0000313E  6100 009C                216      bsr     gameplay        branch to gameplay subroutine
00003142  6100 012E                217      bsr     clear_screen    clears the screen
00003146  6100 00AE                218      bsr     hud             branch to display HUD subroutine
0000314A  6100 0126                219      bsr     clear_screen    clears the screen
0000314E  60DE                     220      bra     gameloop
00003150  6100 012C                221      bsr     replay          branch to replay game subroutine
00003154  6100 011C                222      bsr     clear_screen    clears the screen
00003158  4E75                     223      rts                     return from gameloop: subroutine
0000315A                           224  
0000315A                           225  *-------------------------------------------------------
0000315A                           226  *----------------Update Quest Progress------------------
0000315A                           227  *  Complete Quest
0000315A                           228  *------------------------------------------------------- 
0000315A                           229  update:
0000315A  6100 0148                230      bsr     endl            print a CR and LF
0000315E  6100 00F4                231      bsr     decorate        decorate with dots using a loop
00003162  43F9 00003478            232      lea     update_msg,A1   
00003168  103C 000E                233      move.b  #14,D0
0000316C  4E4F                     234      trap    #15
0000316E  6100 00E4                235      bsr     decorate
00003172  4E75                     236      rts
00003174                           237  *-------------------------------------------------------
00003174                           238  *-----------------Draw Quest Updates--------------------
00003174                           239  * Draw the game progress information, status regarding
00003174                           240  * quest
00003174                           241  *------------------------------------------------------- 
00003174                           242  draw:
00003174  6100 012E                243      bsr     endl
00003178  6100 00DA                244      bsr     decorate
0000317C  43F9 0000348A            245      lea     draw_msg,A1
00003182  103C 000E                246      move.b  #14,D0
00003186  4E4F                     247      trap    #15
00003188  6100 00CA                248      bsr     decorate
0000318C  4E75                     249      rts
0000318E                           250  *-------------------------------------------------------
0000318E                           251  *------------------------Potions------------------------
0000318E                           252  * Input the ingredients for each potion. Ingredients costs 
0000318E                           253  * money. For an advanced mark you need to manage this 
0000318E                           254  * resource
0000318E                           255  *------------------------------------------------------- 
0000318E                           256  feed:
0000318E  6100 0114                257      bsr     endl
00003192  6100 00C0                258      bsr     decorate
00003196  43F9 00003396            259      lea     potion_msg,A1
0000319C  103C 000E                260      move.b  #14,D0
000031A0  4E4F                     261      trap    #15
000031A2  6100 00B0                262      bsr     decorate
000031A6  4E75                     263      rts
000031A8                           264  
000031A8                           265  *-------------------------------------------------------
000031A8                           266  *--------------------Potions Inventory---------------------
000031A8                           267  * Number of potions to be used in a Quest 
000031A8                           268  *------------------------------------------------------- 
000031A8                           269  potions:
000031A8  6100 00FA                270      bsr     endl
000031AC  6100 00A6                271      bsr     decorate
000031B0  43F9 000033E2            272      lea     potions_msg,A1
000031B6  103C 000E                273      move.b  #14,D0
000031BA  4E4F                     274      trap    #15
000031BC  6100 0096                275      bsr     decorate
000031C0  4E75                     276      rts
000031C2                           277  
000031C2                           278  *-------------------------------------------------------
000031C2                           279  *-------------------------Weapons-----------------------
000031C2                           280  * Number of weapons
000031C2                           281  *-------------------------------------------------------   
000031C2                           282  weapons:
000031C2  6100 00E0                283      bsr     endl
000031C6  6100 008C                284      bsr     decorate
000031CA  43F9 000033F7            285      lea     weapons_msg,A1
000031D0  103C 000E                286      move.b  #14,D0
000031D4  4E4F                     287      trap    #15
000031D6  6100 007C                288      bsr     decorate
000031DA  4E75                     289      rts
000031DC                           290  
000031DC                           291  *-------------------------------------------------------
000031DC                           292  *---Game Play (Quest Progress)--------------------------
000031DC                           293  *------------------------------------------------------- 
000031DC                           294  gameplay:
000031DC  6100 00C6                295      bsr     endl
000031E0  0C14 0000                296      CMP.B   #0,(A4)    Check which stage the game is in
000031E4  6700 FE3A                297      BEQ     pick_role  branch to the pick role subroutine
000031E8  0C14 0005                298      CMP.B   #5,(A4)    Check which stage the game is in
000031EC  6700 00EA                299      BEQ     movement  branch to the movement subroutine
000031F0  6100 0026                300      bsr     collision
000031F4  4E75                     301      rts
000031F6                           302  
000031F6                           303  *-------------------------------------------------------
000031F6                           304  *-----------------Heads Up Display (Score)--------------
000031F6                           305  * Retrieves the score from memory location
000031F6                           306  *-------------------------------------------------------   
000031F6                           307  hud:
000031F6                           308  
000031F6  6100 00AC                309      bsr     endl
000031FA  6100 0058                310      bsr     decorate
000031FE  43F9 000034D6            311      lea     hud_msg,A1
00003204  103C 000E                312      move.b  #14,D0
00003208  4E4F                     313      trap    #15
0000320A  1213                     314      move.b  (A3),D1     retrieve the value A3 point to and move to D1
0000320C  103C 0003                315      move.b  #3,D0       move literal 3 to D0
00003210  4E4F                     316      trap    #15         intrepret value in D0, which 3 which displays D1
00003212  6100 0040                317      bsr     decorate
00003216  4E75                     318      rts
00003218                           319  
00003218                           320  *-------------------------------------------------------
00003218                           321  *-----------------------Being Attacked------------------
00003218                           322  * This could be used for collision detection
00003218                           323  *-------------------------------------------------------
00003218                           324  collision:
00003218  123C 0064                325      move.b  #mine_loc,D1
0000321C  B27C 0064                326      cmp     #100,D1 is( x == 100)?
00003220  6600 0010                327      bne     collision_miss if x is equal to 100, then hit
00003224                           328  collision_hit:
00003224                           329      *hit
00003224  43F9 00003498            330      lea     hit_msg,A1
0000322A  303C 000E                331      move    #14,D0
0000322E  4E4F                     332      trap    #15
00003230  4E75                     333      rts
00003232                           334      
00003232                           335  collision_miss:
00003232                           336      *miss
00003232  43F9 000034A0            337      lea     miss_msg,A1
00003238  303C 000E                338      move    #14,D0
0000323C  4E4F                     339      trap    #15
0000323E  4E75                     340      rts
00003240                           341  
00003240                           342  *-------------------------------------------------------
00003240                           343  *--------------------------Loop-------------------------
00003240                           344  *-------------------------------------------------------
00003240                           345  loop:
00003240  163C 0005                346      move.b  #5, D3 loop counter D3=5
00003244                           347  next:
00003244  43F9 000034A6            348      lea     loop_msg,A1
0000324A  103C 000E                349      move.b  #14,D0
0000324E  4E4F                     350      trap    #15
00003250  5343                     351      sub     #1,D3   decrement loop counter
00003252  66F0                     352      bne     next    repeat until D0=0
00003254                           353  
00003254                           354  *-------------------------------------------------------
00003254                           355  *------------------Screen Decoration--------------------
00003254                           356  *-------------------------------------------------------
00003254                           357  decorate:
00003254  163C 003C                358      move.b  #60, D3
00003258  6100 004A                359      bsr     endl
0000325C                           360  out:
0000325C  43F9 000034A6            361      lea     loop_msg,A1
00003262  103C 000E                362      move.b  #14,D0
00003266  4E4F                     363      trap    #15
00003268  5343                     364      sub     #1,D3   decrement loop counter
0000326A  66F0                     365      bne     out     repeat until D0=0
0000326C  6100 0036                366      bsr     endl
00003270  4E75                     367      rts
00003272                           368      
00003272                           369  clear_screen: 
00003272  103C 000B                370      move.b  #11,D0      clear screen
00003276  323C FF00                371      move.w  #$ff00,D1
0000327A  4E4F                     372      trap    #15
0000327C  4E75                     373      rts
0000327E                           374  *-------------------------------------------------------
0000327E                           375  *------------------------Replay-------------------------
0000327E                           376  *-------------------------------------------------------
0000327E                           377  replay:
0000327E  6100 0024                378      bsr     endl
00003282  43F9 000034A8            379      lea     replay_msg,A1
00003288  103C 000E                380      move.b  #14,D0
0000328C  4E4F                     381      trap    #15
0000328E                           382      
0000328E  103C 0004                383      move.b  #4,D0
00003292  4E4F                     384      trap    #15
00003294                           385  
00003294  1ABC 0000                386      move.b  #0,(A5)     Reset the game state for restart
00003298                           387      
00003298  B27C 0000                388      cmp     #exit,D1
0000329C  6700 FD68                389      beq     end         if SR Z register contains 1 beq => Branch Equals
000032A0  6100 FE8C                390      bsr     gameloop
000032A4                           391  
000032A4                           392  endl:
000032A4  48E7 8040                393      movem.l D0/A1,-(A7)
000032A8  303C 000E                394      move    #14,D0
000032AC  43F9 000032FC            395      lea     crlf,A1
000032B2  4E4F                     396      trap    #15
000032B4  4CDF 0201                397      movem.l (A7)+,D0/A1
000032B8  4E75                     398      rts
000032BA                           399      
000032BA                           400  *-------------------------------------------------------
000032BA                           401  *-------------------Setup the world---------------------
000032BA                           402  *-------------------------------------------------------
000032BA                           403  setup_world:
000032BA  11FC 0001 514A           404      move.b  #1,$514A    Setup the starting corridor
000032C0  11FC 0006 513A           405      move.b  #6,$513A    Continue upwards from starting corridor
000032C6  11FC 0004 5139           406      move.b  #4,$5139
000032CC  11FC 0001 5129           407      move.b  #1,$5129
000032D2  11FC 0001 5119           408      move.b  #1,$5119    First shop
000032D8                           409      
000032D8                           410  *-------------------------------------------------------
000032D8                           411  *-------------------Check Wall Collisions---------------
000032D8                           412  *-------------------------------------------------------
000032D8                           413  movement:
000032D8  43F9 000038E6            414      lea     movement_msg,A1
000032DE  103C 000E                415      move.b  #14,D0
000032E2  4E4F                     416      trap    #15
000032E4                           417  
000032E4  1A3C 0004                418      move.b  #4,D5           Move the number 3 to D5 to tell the program how many options there are
000032E8                           419      
000032E8  6100 FD62                420      bsr     input           branch to the input subroutine
000032EC                           421      
000032EC  6100 0004                422      bsr     wall_collisions Check wall collisions
000032F0  4E75                     423      rts
000032F2                           424  
000032F2                           425  *-------------------------------------------------------
000032F2                           426  *-------------------Check Wall Collisions---------------
000032F2                           427  *-------------------------------------------------------
000032F2                           428  wall_collisions:
000032F2  0C16 0001                429      CMP.B   #1,(A6)     Check the corridor type of the current position
000032F6  6700 0004                430      BEQ     cor_type_one Branch to Display the corridor type
000032FA                           431      
000032FA  4E75                     432      rts
000032FC                           433      
000032FC                           434  cor_type_one:
000032FC                           435      
000032FC                           436      
000032FC                           437  *-------------------------------------------------------
000032FC                           438  *-------------------Data Delarations--------------------
000032FC                           439  *-------------------------------------------------------
000032FC                           440  
000032FC= 0D 0A 00                 441  crlf:           dc.b    $0D,$0A,0
000032FF= 2A 2A 2A 2A 2A 2A ...    442  welcome_msg:    dc.b    '************************************************************'
0000333B= 0D 0A                    443                  dc.b    $0D,$0A
0000333D= 41 76 61 6C 6F 6E ...    444                  dc.b    'Avalon: The Legend Lives'
00003355= 0D 0A                    445                  dc.b    $0D,$0A
00003357= 2A 2A 2A 2A 2A 2A ...    446                  dc.b    '************************************************************'
00003393= 0D 0A 00                 447                  dc.b    $0D,$0A,0
00003396= 46 65 65 64 20 6C ...    448  potion_msg:     dc.b    'Feed load (each horse needs at least 100 units of feed)'
000033CD= 0D 0A                    449                  dc.b    $0D,$0A
000033CF= 45 6E 74 65 72 20 ...    450                  dc.b    'Enter feed load : ',0
000033E2= 4E 75 6D 62 65 72 ...    451  potions_msg:    dc.b    'Number of potions : ',0
000033F7= 45 61 63 68 20 71 ...    452  weapons_msg:    dc.b    'Each quest need at least 2 Weapons'
00003419= 0D 0A                    453                  dc.b    $0D,$0A
0000341B= 6D 69 6E 69 6D 75 ...    454                  dc.b    'minimum requirement is 2 i.e. Sword x 1 and Speer x 1.'
00003451= 0D 0A                    455                  dc.b    $0D,$0A
00003453= 45 6E 74 65 72 20 ...    456                  dc.b    'Enter # of weapons : ',0
00003469= 41 64 64 20 47 61 ...    457  gameplay_msg:   dc.b    'Add Gameplay !',0
00003478= 55 70 64 61 74 65 ...    458  update_msg:     dc.b    'Update Gameplay !',0
0000348A= 44 72 61 77 20 53 ...    459  draw_msg:       dc.b    'Draw Screen !',0
00003498= 53 74 72 69 6B 65 ...    460  hit_msg:        dc.b    'Strike!',0
000034A0= 4D 69 73 73 21 00        461  miss_msg:       dc.b    'Miss!',0
000034A6= 2E 00                    462  loop_msg:       dc.b    '.',0
000034A8= 45 6E 74 65 72 20 ...    463  replay_msg:     dc.b    'Enter 0 to Quit any other number to replay : ',0
000034D6= 53 63 6F 72 65 20 ...    464  hud_msg:        dc.b    'Score : ',0
000034DF                           465  
000034E0                           466  health:     ds.w    1
000034E2                           467  score:      ds.w    1 reserve space for score
000034E4                           468  
000034E4= 59 6F 75 20 61 77 ...    469  wake_up_msg:    dc.b    'You awake in a room, on a bed of red velvet, with no memory',$0D,$0A
00003521= 6F 66 20 68 6F 77 ...    470                  dc.b    'of how you got here. You climb from the frame and look in a nearby mirror',$0D,$0A,0
0000356D= 31 3E 20 59 6F 75 ...    471  pick_role_msg:  dc.b    '1> You wear armour of polished iron, a sword laying close by. (Knight class)',$0D,$0A,$0D,$0A
000035BD= 32 3E 20 59 6F 75 ...    472                  dc.b    '2> You wear a cloak with mystic symbols sewn into the fabrics, an ancient',$0D,$0A
00003608= 6C 6F 6F 6B 69 6E ...    473                  dc.b    'looking staff lays near. (Mage class)',$0D,$0A,$0D,$0A
00003631= 33 3E 20 59 6F 75 ...    474                  dc.b    '3> You wear tight, well-fitting leather armour with reminents of black dye',$0D,$0A
0000367D= 73 74 61 69 6E 65 ...    475                  dc.b    'stained to the material. Two knives are fastened to your belt. (Rogue class)',$0D,$0A,0
000036CC= 45 6E 74 65 72 20 ...    476  input_nums_msg  dc.b    'Enter num between 1 and ',0
000036E5= 3A 20 00                 477  colon_msg       dc.b    ': ',0
000036E8                           478  
000036E8= 49 6E 70 75 74 74 ...    479  input_error_msg dc.b    'Inputted number is outside of range.',$0D,$0A,0
0000370F= 47 61 6D 65 73 74 ...    480  fake_gamestate_msg dc.b    'Gamestate doesnt exist',$0D,$0A,0
00003728= 59 6F 75 20 70 69 ...    481  knight_role_msg dc.b    'You pick up your sword, grab a torch from the wall, and leave the room.',$0D,$0A
00003771= 2D 20 59 6F 75 20 ...    482                  dc.b    '- You have chosen the KNIGHT class. You specialise in slow, strong attacks.',$0D,$0A,0
000037BF= 59 6F 75 20 70 69 ...    483  mage_role_msg   dc.b    'You pick up your staff, grab a torch from the wall, and leave the room.',$0D,$0A
00003808= 2D 20 59 6F 75 20 ...    484                  dc.b    '- You have chosen the MAGE class. You specialise in ranged magic attacks.',$0D,$0A,0
00003854= 59 6F 75 20 66 61 ...    485  rogue_role_msg  dc.b    'You fasten your belt, grab a torch from the wall, and leave the room.',$0D,$0A
0000389B= 2D 20 59 6F 75 20 ...    486                  dc.b    '- You have chosen the ROGUE class. You specialise in fast, weak attacks.',$0D,$0A,0
000038E6= 31 3E 20 4D 6F 76 ...    487  movement_msg    dc.b    '1> Move north.',$0D,$0A
000038F6= 32 3E 20 4D 6F 76 ...    488                  dc.b    '2> Move east.',$0D,$0A
00003905= 33 3E 20 4D 6F 76 ...    489                  dc.b    '3> Move south.',$0D,$0A
00003915= 34 3E 20 4D 6F 76 ...    490                  dc.b    '4> Move west.',$0D,$0A,0
00003925                           491  
00003925                           492      end start

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CLEAR_SCREEN        3272
COLLISION           3218
COLLISION_HIT       3224
COLLISION_MISS      3232
COLON_MSG           36E5
COR_TYPE_ONE        32FC
CRLF                32FC
DECORATE            3254
DRAW                3174
DRAW_MSG            348A
END                 3006
ENDL                32A4
EXIT                0
FAKE_GAMESTATE      3120
FAKE_GAMESTATE_MSG  370F
FEED                318E
GAME                3000
GAMELOOP            312E
GAMEPLAY            31DC
GAMEPLAY_MSG        3469
HEALTH              34E0
HIT_MSG             3498
HUD                 31F6
HUD_MSG             34D6
INPUT               304C
INPUT_ERROR_MSG     36E8
INPUT_NUMS_MSG      36CC
INVALID_INPUT       309A
KNIGHT_ROLE_MSG     3728
KNIGHT_SELECT       30CC
LOOP                3240
LOOP_MSG            34A6
LOSE_POINT          8
MAGE_ROLE_MSG       37BF
MAGE_SELECT         30DA
MANAGE_INPUT        3076
MAX_POTIONS         9
MINE_LOC            64
MIN_FEED            64
MIN_POTIONS         1
MIN_WEAPONS         6
MISS_MSG            34A0
MOVEMENT            32D8
MOVEMENT_INPUT      30F6
MOVEMENT_MSG        38E6
MOVE_EAST           311A
MOVE_NORTH          3118
MOVE_SOUTH          311C
MOVE_WEST           311E
NEXT                3244
OUT                 325C
PICK_ROLE           3020
PICK_ROLE_MSG       356D
POTIONS             31A8
POTIONS_MSG         33E2
POTION_MSG          3396
REPLAY              327E
REPLAY_MSG          34A8
ROGUE_ROLE_MSG      3854
ROGUE_SELECT        30E8
ROLE_INPUT          30A8
SCORE               34E2
SETUP_WORLD         32BA
START               1000
UPDATE              315A
UPDATE_MSG          3478
WAKE_UP_MSG         34E4
WALL_COLLISIONS     32F2
WEAPONS             31C2
WEAPONS_MSG         33F7
WELCOME             300A
WELCOME_MSG         32FF
WIN_POINT           5
